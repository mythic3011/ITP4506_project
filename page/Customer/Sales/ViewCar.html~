<!doctype html>
<html lang="en">
<head>
    <title>Vehicle Browser | Legend Motor Limited</title>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <link href="../../../resources/image/icon-removebg.png" rel="icon" type="image/x-icon"/>
    <!--    <script type="module" src="../../../resources/js/Wishlist.js"></script>-->
    <script type="module" src="../../../resources/js/viewVehicles.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.tailwindcss.com?plugins=forms,typography,aspect-ratio,line-clamp,container-queries"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: {
                            "500": "#3b82f6",
                        }
                    }
                }
            }
        }
    </script>
</head>
<body class="bg-gray-50 font-sans">

<header class="navbar bg-white shadow-md sticky top-0 z-10">
    <div class="container mx-auto flex justify-between items-center p-4">
        <a href="#" class="flex items-center">
            <img src="../../../resources/image/icon-removebg.png" alt="Legend Motor Limited" class="h-12 w-12">
            <span class="ml-3 text-xl font-bold">LMC</span>
        </a>

        <div class="relative">
            <label for="search-bar-vehicles" class="absolute left-2 top-2">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
            </label>
            <input type="text" id="search-bar-vehicles" placeholder="Search Vehicles..." class="border rounded px-10 py-1"/>
        </div>

        <div class="hamburger md:hidden flex flex-col cursor-pointer">
            <span class="w-6 h-0.5 bg-gray-700 mb-1"></span>
            <span class="w-6 h-0.5 bg-gray-700 mb-1"></span>
            <span class="w-6 h-0.5 bg-gray-700"></span>
        </div>

        <nav class="nav-links hidden md:flex space-x-4">
            <a class="navbar_a text-gray-700 hover:text-blue-500" href="#">Home</a>
            <a class="navbar_a text-gray-700 hover:text-blue-500" href="./ViewCar.html">Vehicles</a>
            <a class="navbar_a text-gray-700 hover:text-blue-500" href="Wishlist.html">Wishlist</a>
            <a class="navbar_a text-gray-700 hover:text-blue-500" href="./ordersRecord.html">Orders</a>
            <a class="navbar_a text-gray-700 hover:text-blue-500" href="./profile.html">Profile</a>
            <a class="navbar_a text-gray-700 hover:text-blue-500" href="../../../logout.html">Log Out</a>
        </nav>
    </div>
</header>

<!-- Notification Container -->
<div id="notification-container" class="fixed top-4 right-4 z-50"></div>

<main class="container mx-auto p-6">
    <!-- Main Content -->
    <main class="content bg-white dark:bg-gray-900 text-gray-800 dark:text-gray-200 min-h-screen p-8">
        <div class="container mx-auto">
            <h1 class="text-3xl font-bold mb-6">Vehicles</h1>

            <!-- Search and Sort Section -->
            <div class="mb=4 flex flex-col sm:flex-row space-y=4 sm:space-y=0 sm:space-x=4">
                <!-- Search Bar -->
                <div class="relative w-full sm:w-1/3">
                    <label for="VehicleSearch" class="block mb-2">Search Vehicles:</label>
                    <div class="relative">
                        <input id="VehicleSearch" type="text"
                               placeholder="Enter Vehicle name or ID"
                               class="w-full p-2 pl-10 border rounded"/>
                        <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400"
                             xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
                             stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="11" cy="11" r="8"></circle>
                            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                        </svg>
                    </div>
                </div>


                <!-- Sort By Dropdown -->
                <div class="w-full sm:w-1/3 hidden">
                    <label for="VehicleSorting" class="block mb-2">Sort By:</label>
                    <select id="VehicleSorting" class="w-full p-2 border rounded">
                        <option value="None">None</option>
                        <option value="Price-Low-to-High">Price - Low to High</option>
                        <option value="Price-High-to-Low">Price - High to Low</option>
                        <option value="make">make</option>
                    </select>
                </div>

                <!-- Specify make Dropdown -->
                <div class="w-full sm:w=1/3 hidden" id="makeFilterContainer">
                    <label for="makeFilter" class="block mb-2">Specify Brand:</label>
                    <select id="makeFilter" class="w-full p-2 border rounded">
                        <option value="All">All</option>
                    </select>
                </div>
            </div>

            <!-- Vehicle List -->
            <div id="VehicleList" class="grid grid-cols1 sm:grid-cols2 lg:grid-cols3 gap4"></div>
            <div id='noVehiclesMessage' class='flex justify-center items-center h-full hidden pt-4'>
                <div class='bg-gray100 dark:bg-gray800 text-gray900 dark:text-white rounded-lg p6 flex flex-col items-center'>
                    <svg class="w-12 h-12 mb-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                         fill="none"
                         stroke="currentColor" stroke-width="2">
                        <path d="M7 17m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0"></path>
                        <path d="M17 17m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0"></path>
                        <path d="M5 17h-2v-6l2-5h9l4 5h1a2 2 0 0 1 2 2v4h-2m-4 0h-6"></path>
                    </svg>
                    <h2 class="text-xl font-semibold">No Vehicles Found</h2>
                    <p class="text-gray-400">There are no vehicles to display at this time.
                        Or Try adjusting your search
                        or filters</p>
                </div>
            </div>

            <!-- Footer -->
            <footer class="bg-white dark:bg-gray-800 text-center py-4 mt-8">
                <div class="container mx-auto">
                    <p class="text-gray-600 dark:text-gray-400">Â© 2024 Legend Motor Company. All rights reserved.</p>
                    <div class="flex justify-center space-x-4 mt-2">
                        <a href="#"
                           class="text-gray-600 dark:text-gray-400 hover:text-blue-500 dark:hover:text-blue-300">Privacy
                            Policy</a>
                        <a href="#"
                           class="text-gray-600 dark:text-gray-400 hover:text-blue-500 dark:hover:text-blue-300">Terms
                            of Service</a>
                        <a href="#"
                           class="text-gray-600 dark:text-gray-400 hover:text-blue-500 dark:hover:text-blue-300">Contact
                            Us</a>
                    </div>
                </div>
            </footer>
            <!-- Footer -->
        </div>
    </main>
</div>

<script>
    $(document).ready(async function () {
        let vehicles = [];

        const vehicleListContainer = $("#VehicleList");
        const noVehiclesMessage = $("#noVehiclesMessage");

        await fetchVehicles();
        setupEventListeners();
        renderVehicles(vehicles);

        async function fetchVehicles() {
            try {
                const data = await $.getJSON("../../../resources/json/vehicles.json");

                vehicles = data.map(vehicle => {
                    // Validate images to ensure it's an array
                    const images = Array.isArray(vehicle.images) ? vehicle.images : [];

                    return {
                        id: vehicle.id,
                        make: vehicle.make,
                        model: vehicle.model,
                        year: vehicle.year,
                        price: vehicle.price,
                        images: images,  // Use validated images
                        availableColors: vehicle.availableColors.map(color => ({
                            name: color.name,
                            hexCode: color.hexCode
                        })),
                        upgradeOptions: {
                            interiorUpgrades: vehicle.upgradeOptions && vehicle.upgradeOptions.interior
                                ? vehicle.upgradeOptions.interior.map(option => ({
                                    name: option.name,
                                    additionalCost: option.additionalCost
                                }))
                                : [],  // Default to an empty array if undefined
                            performanceUpgrades: vehicle.upgradeOptions && vehicle.upgradeOptions.performance
                                ? vehicle.upgradeOptions.performance.map(option => ({
                                    name: option.name,
                                    additionalCost: option.additionalCost
                                }))
                                : [],  // Default to an empty array if undefined
                            technologyUpgrades: vehicle.upgradeOptions && vehicle.upgradeOptions.technology
                                ? vehicle.upgradeOptions.technology.map(option => ({
                                    name: option.name,
                                    additionalCost: option.additionalCost
                                }))
                                : []   // Default to an empty array if undefined
                        },
                        insuranceOptions: vehicle.insurancePlans.map(option => ({
                            planName: option.planName,
                            annualPremium: option.annualPremium
                        })),
                        specifications: {
                            engine: {
                                type: vehicle.specifications.engine.type,
                                cylinderCount: vehicle.specifications.engine.cylinderCount,
                                horsepower: vehicle.specifications.engine.horsepower,
                                torque: vehicle.specifications.engine.torque,
                                drivetrain: vehicle.specifications.engine.drivetrain
                            },
                            transmission: {
                                type: vehicle.specifications.transmission.type,
                                gears: vehicle.specifications.transmission.gears
                            },
                            mileage: {
                                value: vehicle.specifications.mileage.value,
                                unit: vehicle.specifications.mileage.unit
                            },
                            safetyRating: vehicle.specifications.safetyRating || null,  // Default to null if undefined
                            warrantyYears: vehicle.specifications.warrantyYears || null  // Default to null if undefined
                        }
                    };
                });

                console.log(vehicles);
            } catch (error) {
                console.error("Error fetching vehicles:", error);
            }
        }

        function setupEventListeners() {
            $("#VehicleSorting").on("change", applyFiltersAndSort);
            $("#makeFilter").on("change", applyFiltersAndSort);
            $("#VehicleSearch").on("input", applyFiltersAndSort);
        }

        function applyFiltersAndSort() {
            const searchTerm = $("#VehicleSearch").val().toLowerCase();
            const sortBy = $("#VehicleSorting").val();
            const makeFilter = $("#makeFilter").val();

            let filteredVehicles = vehicles.filter(vehicle =>
                (vehicle.make.toLowerCase().includes(searchTerm) || vehicle.id.toString().includes(searchTerm)) &&
                (makeFilter === "All" || vehicle.make === makeFilter)
            );

            filteredVehicles = sortVehicles(filteredVehicles, sortBy);
            renderVehicles(filteredVehicles);
        }

        function sortVehicles(vehicles, sortBy) {
            switch (sortBy) {
                case "Price-Low-to-High":
                    return vehicles.sort((a, b) => a.price - b.price);
                case "Price-High-to-Low":
                    return vehicles.sort((a, b) => b.price - a.price);
                case "make":
                    return vehicles.sort((a, b) => a.make.localeCompare(b.make));
                default:
                    return vehicles;
            }
        }

        function renderVehicles(vehicles) {
            vehicleListContainer.empty(); // Clear previous content

            if (vehicles.length === 0) {
                noVehiclesMessage.removeClass("hidden");
            } else {
                noVehiclesMessage.addClass("hidden");

                const fragment = $(document.createDocumentFragment());

                vehicles.forEach(vehicle => {
                    const card = createVehicleCard(vehicle);
                    fragment.append(card);
                });
                vehicleListContainer.append(fragment);
            }
        }

        function createVehicleCard(vehicle) {
            const card = $('<div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden transition-transform transform hover:scale-105"></div>');

            const sliderContainer = $('<div class="image-slider relative overflow-hidden"></div>');

            const prevButton = $('<button class="prev absolute left-0 top-1/2 transform -translate-y-1/2 bg-gray-200 rounded-full p-2 transition duration-200 hover:bg-gray-300 focus:outline-none">â®</button>');
            prevButton.on("click", () => changeSlide(-1));

            const nextButton = $('<button class="next absolute right-0 top-1/2 transform -translate-y-1/2 bg-gray-200 rounded-full p-2 transition duration-200 hover:bg-gray-300 focus:outline-none">â¯</button>');
            nextButton.on("click", () => changeSlide(1));

            sliderContainer.append(prevButton, nextButton);

            const slidesContainer = $('<div class="slides relative"></div>');

            // Fallback image URL
            const fallbackSvg = 'https://images.unsplash.com/photo-1621007947382-bb3c3994e3fb?w=500';

            // Check if an images array is defined and has valid URLs
            if (Array.isArray(vehicle.images) && vehicle.images.length > 0) {
                vehicle.images.forEach((url, index) => {
                    const img = $(`<img src="${url}" alt="${vehicle.make} ${vehicle.model}" class="slide${index === 0 ? '' : ' hidden'} rounded-lg transition-opacity duration-300">`);
                    img.on("error", () => img.attr("src", fallbackSvg)); // Use fallback on error
                    slidesContainer.append(img);
                });
            } else {
                // If no valid images, add a single fallback image
                const fallbackImg = $(`<img src="${fallbackSvg}" alt="Fallback image for ${vehicle.make} ${vehicle.model}" class="slide rounded-lg transition-opacity duration-300">`);
                slidesContainer.append(fallbackImg);
            }
            sliderContainer.append(slidesContainer);

            // Add slide indicators
            const indicators = $('<div class="flex justify-center mt-2"></div>');

            // Create indicators based on the number of images
            const numberOfSlides = vehicle.images.length > 0 ? vehicle.images.length : 1; // At least one slide for fallback
            for (let index = 0; index < numberOfSlides; index++) {
                const indicator = $(`<span class="indicator w-3 h-3 bg-gray-400 rounded-full mx-1 cursor-pointer" data-index="${index}"></span>`);
                indicator.on("click", () => {
                    slideIndex = index;
                    showSlides(slideIndex);
                });
                indicators.append(indicator);
            }

            sliderContainer.append(indicators);
            card.append(sliderContainer);

            const content = $('<div class="p-4"></div>');
            const title = $(`<h3 class="text-lg font-semibold mb-2 text-gray-900 dark:text-white">${vehicle.make} ${vehicle.model}</h3>`);
            const priceInfo = $(`<p class="text-gray-700 dark:text-gray-300">Price: <span class="font-bold">$${vehicle.price}</span></p>`);
            content.append(title, priceInfo);

            // Create a button for adding to wishlist aka cart
            const addToWishListButton = $('<button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded inline-flex items-center transition duration-200">Add to Wishlist</button>');

            addToWishListButton.val(vehicle.id);

            addToWishListButton.on("click", () => {
                addToWishListButton.text("Added to Wishlist");
                addToWishListButton.removeClass("bg-blue-500 hover:bg-blue-700").addClass("bg-green-500 hover:bg-green-700");

                // Redirect to ViewDetailsNRequest page
                window.location.href = `ViewDetailsNRequest.html?id=${addToWishListButton.val()}`;
            });

            content.append(addToWishListButton);

            card.append(content);

            let slideIndex = 0;

            function showSlides(n) {
                const slides = slidesContainer.find(".slide");
                const indicators = sliderContainer.find(".indicator");

                if (n >= slides.length) slideIndex = 0;
                if (n < 0) slideIndex = slides.length - 1;

                slides.addClass("hidden");
                $(slides[slideIndex]).removeClass("hidden");

                // Update indicators
                indicators.removeClass("bg-blue-500").addClass("bg-gray-400");
                $(indicators[slideIndex]).removeClass("bg-gray-400").addClass("bg-blue-500");
            }

            function changeSlide(n) {
                slideIndex += n;
                showSlides(slideIndex);
            }

            showSlides(slideIndex);

            return card;
        }
    });
</script>
</body>
</html>
